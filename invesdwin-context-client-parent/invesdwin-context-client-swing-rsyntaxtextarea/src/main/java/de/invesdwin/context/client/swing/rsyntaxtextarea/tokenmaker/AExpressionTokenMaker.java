/* The following code was generated by JFlex 1.4.3 on 18.04.19, 00:10 */

package de.invesdwin.context.client.swing.rsyntaxtextarea.tokenmaker;

import java.io.IOException;
import java.io.Reader;

import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexCTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

// CHECKSTYLE:OFF
// @NotThreadSafe

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.4.3 on 18.04.19, 00:10 from the
 * specification file
 * <tt>/opt/subes/dev/Entwicklung/invesdwin/invesdwin-oss/invesdwin-context-client/invesdwin-context-client-parent/invesdwin-context-client-swing-rsyntaxtextarea/src/main/java/de/invesdwin/context/client/swing/rsyntaxtextarea/tokenmaker/ExpressionTokenMaker.flex</tt>
 */
public abstract class AExpressionTokenMaker extends AbstractJFlexCTokenMaker {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int EOL_COMMENT = 6;
    public static final int DOCCOMMENT = 4;
    public static final int YYINITIAL = 0;
    public static final int MLC = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state in the DFA for the
     * lexical state l at the beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3 };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED = "\11\0\1\22\1\11\1\0\1\22\1\20\22\0\1\22\1\50\1\16"
            + "\1\21\1\21\1\50\1\53\1\10\2\43\1\24\1\45\1\44\1\33" + "\1\34\1\23\1\4\1\5\2\17\4\7\2\3\1\52\1\44\1\46"
            + "\1\47\1\51\1\52\1\54\1\55\1\26\1\6\1\57\1\32\1\31" + "\5\1\1\25\1\1\1\56\1\60\2\1\1\61\5\1\1\30\2\1"
            + "\1\43\1\12\1\43\1\50\1\2\1\0\1\40\1\27\1\6\1\57" + "\1\37\1\15\1\1\1\62\3\1\1\41\1\1\1\14\1\60\2\1"
            + "\1\36\1\42\1\35\1\13\1\1\1\62\1\30\2\1\1\63\1\50" + "\1\43\1\52\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\4\0\1\1\1\2\2\3\1\4\1\5\1\2\1\6"
            + "\1\1\1\7\3\10\3\2\1\11\1\2\5\10\1\12" + "\1\2\1\13\1\14\3\13\1\15\3\13\1\16\1\1"
            + "\2\17\1\20\1\3\1\17\1\20\2\17\1\21\2\17" + "\1\4\1\22\1\0\1\4\1\2\2\6\1\23\1\24"
            + "\1\25\2\2\1\0\1\10\1\12\1\26\1\27\1\30" + "\2\0\1\31\1\1\1\3\1\20\1\0\2\21\1\3"
            + "\1\21\1\4\1\32\2\4\1\22\1\4\1\2\1\6" + "\1\33\1\6\1\34\1\2\2\1\2\17\1\4\1\6"
            + "\1\35\1\36\2\1\1\4\1\6\2\1\1\4\1\6" + "\2\1";

    private static int[] zzUnpackAction() {
        final int[] result = new int[110];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(final String packed, final int offset, final int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            final int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"
            + "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u01d4\0\u0270\0\u02a4\0\u02d8"
            + "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u01d4\0\u01d4\0\u03dc\0\u0410"
            + "\0\u0444\0\u01d4\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u01d4\0\u01d4"
            + "\0\u0548\0\u057c\0\u01d4\0\u05b0\0\u05e4\0\u0618\0\u01d4\0\u064c"
            + "\0\u0680\0\u06b4\0\u0680\0\u0680\0\u06e8\0\u071c\0\u0750\0\u0784"
            + "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u01d4\0\u0888\0\u08bc\0\u08f0"
            + "\0\u0924\0\u0958\0\u01d4\0\u01d4\0\u098c\0\u09c0\0\u09f4\0\u02d8"
            + "\0\u0a28\0\u0a5c\0\u0104\0\u01d4\0\u01d4\0\u0a90\0\u0ac4\0\u01d4"
            + "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0680\0\u0bfc\0\u0c30"
            + "\0\u0c64\0\u01d4\0\u0c98\0\u0ccc\0\u0888\0\u0d00\0\u0d34\0\u0d68"
            + "\0\u01d4\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0bfc\0\u0ea0"
            + "\0\u0ed4\0\u0f08\0\u01d4\0\u0104\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"
            + "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110";

    private static int[] zzUnpackRowMap() {
        final int[] result = new int[110];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(final String packed, final int offset, final int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            final int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\5\2\6\1\7\1\10\1\7\1\6\1\7\1\11"
            + "\1\12\1\5\2\6\1\13\1\14\1\7\1\15\1\6" + "\1\16\1\17\1\20\6\6\1\21\1\22\1\23\2\6"
            + "\1\24\2\6\1\25\1\26\1\27\1\30\2\20\1\31" + "\1\32\1\33\1\34\1\24\2\6\1\35\2\6\1\25"
            + "\11\36\1\37\3\36\1\40\6\36\1\41\35\36\1\40" + "\1\36\11\42\1\43\3\42\1\40\6\42\1\44\21\42"
            + "\1\45\5\42\1\0\5\42\2\40\11\46\1\47\3\46" + "\1\40\44\46\1\40\1\46\10\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\5\3\0\6\5\2\0\6\5\11\0" + "\7\5\1\0\1\5\7\6\2\0\1\50\3\6\1\0"
            + "\1\6\1\0\1\6\3\0\6\6\2\0\6\6\11\0" + "\1\5\6\6\1\0\2\51\1\52\3\7\1\51\1\7"
            + "\2\0\3\51\1\53\1\0\1\7\1\0\1\51\3\0" + "\1\54\3\51\1\53\1\55\1\0\1\56\2\51\1\55"
            + "\1\51\1\54\1\51\11\0\3\51\1\53\3\51\1\0" + "\2\51\1\57\1\60\2\61\1\51\1\61\2\0\3\51"
            + "\1\53\1\0\1\61\1\0\1\51\3\0\1\54\2\62" + "\1\63\1\53\1\55\1\0\1\56\2\51\1\55\1\51"
            + "\1\54\1\51\11\0\3\51\1\53\3\51\1\0\10\64" + "\1\65\1\66\1\67\51\64\64\0\1\5\7\6\2\0"
            + "\1\50\3\6\1\0\1\6\1\0\1\6\3\0\6\6" + "\2\0\3\6\1\70\2\6\11\0\1\5\6\6\1\0"
            + "\11\14\1\71\1\72\3\14\1\73\45\14\22\0\1\16" + "\64\0\1\74\1\75\22\0\1\32\63\0\1\32\47\0"
            + "\1\32\13\0\1\32\17\0\3\56\1\0\1\56\7\0" + "\1\56\44\0\1\5\7\6\2\0\1\50\3\6\1\0"
            + "\1\6\1\0\1\6\3\0\6\6\2\0\1\6\1\76" + "\4\6\11\0\1\5\6\6\1\0\1\5\7\6\2\0"
            + "\1\50\1\6\1\77\1\6\1\0\1\6\1\0\1\6" + "\3\0\6\6\2\0\6\6\11\0\1\5\1\6\1\77"
            + "\4\6\46\0\1\32\1\0\1\32\62\0\1\100\1\32" + "\63\0\1\32\1\0\1\101\61\0\1\32\3\0\1\32"
            + "\10\0\1\5\2\102\3\5\1\102\1\5\2\0\1\5" + "\3\102\1\0\1\5\1\0\1\102\3\0\6\102\2\0"
            + "\6\102\11\0\1\5\6\102\1\0\1\5\7\6\2\0" + "\1\50\3\6\1\0\1\6\1\0\1\6\3\0\6\6"
            + "\2\0\1\6\1\103\4\6\11\0\1\5\4\6\1\103" + "\1\6\1\0\11\36\1\0\3\36\1\0\6\36\1\0"
            + "\35\36\1\0\1\36\23\0\1\104\40\0\11\42\1\0" + "\3\42\1\0\6\42\1\0\21\42\1\0\5\42\1\0"
            + "\5\42\25\0\1\105\41\0\1\106\4\0\1\106\4\0" + "\3\106\5\0\1\107\1\0\6\106\2\0\6\106\6\0"
            + "\1\110\3\0\6\106\1\0\11\46\1\0\3\46\1\0" + "\44\46\1\0\1\46\10\5\2\0\1\5\1\111\2\5"
            + "\1\0\1\5\1\0\1\5\3\0\6\5\2\0\6\5" + "\11\0\7\5\1\0\10\51\2\0\4\51\1\0\1\51"
            + "\1\0\1\51\3\0\6\51\2\0\6\51\11\0\7\51" + "\1\0\2\51\1\52\3\112\1\51\1\112\2\0\4\51"
            + "\1\0\1\112\1\0\1\51\3\0\6\51\2\0\6\51" + "\11\0\7\51\1\0\3\51\3\113\1\51\1\113\2\0"
            + "\4\51\1\0\1\113\1\0\1\51\3\0\6\51\1\114" + "\1\0\6\51\2\0\1\114\6\0\7\51\1\0\3\51"
            + "\3\56\1\51\1\56\2\0\3\51\1\53\1\0\1\56" + "\1\0\1\51\3\0\4\51\1\53\1\55\2\0\2\51"
            + "\1\55\3\51\11\0\3\51\1\53\3\51\1\0\2\51" + "\1\57\1\51\2\115\1\51\1\115\2\0\4\51\1\0"
            + "\1\115\1\0\1\51\3\0\6\51\2\0\6\51\11\0" + "\7\51\1\0\3\51\3\60\1\51\1\60\2\0\3\51"
            + "\1\53\1\0\1\60\1\0\1\51\3\0\4\51\1\53" + "\1\55\1\0\1\56\2\51\1\55\3\51\11\0\3\51"
            + "\1\53\3\51\1\0\2\51\1\57\1\60\2\61\1\51" + "\1\61\2\0\3\51\1\53\1\0\1\61\1\0\1\51"
            + "\3\0\1\116\3\51\1\53\1\55\1\0\1\56\2\51" + "\1\55\1\51\1\116\1\51\11\0\3\51\1\53\3\51"
            + "\1\0\4\51\2\117\2\51\2\0\4\51\1\0\1\51" + "\1\0\1\51\3\0\6\51\2\0\6\51\11\0\7\51"
            + "\1\0\3\51\5\120\2\0\3\51\1\120\1\0\1\120" + "\1\0\1\51\3\0\1\51\2\120\1\51\2\120\2\0"
            + "\2\51\2\120\2\51\11\0\1\51\1\120\1\51\1\120" + "\3\51\1\0\10\121\1\122\1\0\52\121\10\0\1\122"
            + "\53\0\4\121\2\123\1\121\1\124\1\125\1\0\1\64" + "\1\126\3\64\1\123\7\121\1\64\5\121\2\64\25\121"
            + "\1\5\7\6\2\0\1\50\3\6\1\0\1\6\1\0" + "\1\6\3\0\6\6\2\0\4\6\1\127\1\6\11\0"
            + "\1\5\6\6\1\0\12\71\1\130\3\71\1\131\51\71" + "\2\14\1\71\2\14\1\0\1\14\1\132\4\14\7\71"
            + "\1\14\5\71\2\14\25\71\24\0\1\133\37\0\1\5" + "\7\6\2\0\1\50\1\134\2\6\1\0\1\6\1\0"
            + "\1\6\3\0\6\6\2\0\6\6\11\0\1\5\6\6" + "\1\0\1\5\7\6\2\0\1\50\3\6\1\0\1\6"
            + "\1\0\1\6\3\0\6\6\2\0\6\6\11\0\1\5" + "\2\6\1\103\3\6\50\0\1\32\1\0\1\20\12\0"
            + "\1\5\7\102\2\0\1\135\3\102\1\0\1\102\1\0" + "\1\102\3\0\6\102\2\0\6\102\11\0\1\5\6\102"
            + "\1\0\51\106\1\110\12\106\1\0\1\106\4\0\1\106" + "\4\0\3\106\7\0\6\106\2\0\6\106\6\0\1\110"
            + "\3\0\6\106\1\0\3\5\5\136\2\0\3\5\1\136" + "\1\0\1\136\1\0\1\5\3\0\1\5\2\136\1\5"
            + "\2\136\2\0\2\5\2\136\2\5\11\0\1\5\1\136" + "\1\5\1\136\3\5\1\0\2\51\1\52\3\112\1\51"
            + "\1\112\2\0\4\51\1\0\1\112\1\0\1\51\3\0" + "\1\54\5\51\2\0\4\51\1\54\1\51\11\0\7\51"
            + "\1\0\3\51\3\113\1\51\1\113\2\0\3\51\1\53" + "\1\0\1\113\1\0\1\51\3\0\4\51\1\53\1\51"
            + "\2\0\6\51\11\0\3\51\1\53\3\51\4\0\3\113" + "\1\0\1\113\7\0\1\113\44\0\2\51\1\57\1\51"
            + "\2\115\1\51\1\115\2\0\4\51\1\0\1\115\1\0" + "\1\51\3\0\1\116\5\51\2\0\4\51\1\116\1\51"
            + "\11\0\7\51\1\0\2\51\1\137\1\51\2\117\2\51" + "\2\0\4\51\1\0\1\51\1\0\1\51\3\0\6\51"
            + "\2\0\6\51\11\0\7\51\1\0\2\51\1\140\5\120" + "\2\0\3\51\1\120\1\0\1\120\1\0\1\51\3\0"
            + "\1\116\2\120\1\51\2\120\2\0\2\51\2\120\1\116" + "\1\51\11\0\1\51\1\120\1\51\1\120\3\51\1\0"
            + "\10\121\1\65\1\0\56\121\2\124\1\121\1\124\1\122" + "\1\0\5\121\1\124\50\121\2\64\1\121\1\64\1\122"
            + "\1\0\5\121\1\64\47\121\5\141\1\65\1\0\3\121" + "\1\141\1\121\1\141\6\121\2\141\1\121\2\141\4\121"
            + "\2\141\14\121\1\141\1\121\1\141\4\121\1\5\7\6" + "\2\0\1\50\3\6\1\0\1\6\1\0\1\6\3\0"
            + "\6\6\2\0\5\6\1\134\11\0\1\5\6\6\1\0" + "\11\71\1\0\55\71\5\142\2\71\1\130\2\71\1\142"
            + "\1\131\1\142\6\71\2\142\1\71\2\142\4\71\2\142" + "\14\71\1\142\1\71\1\142\4\71\23\0\1\143\40\0"
            + "\1\5\7\6\2\0\1\50\3\6\1\0\1\6\1\0" + "\1\6\3\0\6\6\2\0\2\6\1\144\3\6\11\0"
            + "\1\5\6\6\1\0\10\5\2\0\1\5\1\145\2\5" + "\1\0\1\5\1\0\1\5\3\0\6\5\2\0\6\5"
            + "\11\0\7\5\1\0\3\5\5\146\2\0\3\5\1\146" + "\1\0\1\146\1\0\1\5\3\0\1\5\2\146\1\5"
            + "\2\146\2\0\2\5\2\146\2\5\11\0\1\5\1\146" + "\1\5\1\146\3\5\1\0\2\51\1\140\5\120\2\0"
            + "\3\51\1\120\1\0\1\120\1\0\1\51\3\0\1\51" + "\2\120\1\51\2\120\2\0\2\51\2\120\2\51\11\0"
            + "\1\51\1\120\1\51\1\120\3\51\1\0\3\121\5\147" + "\1\65\1\0\3\121\1\147\1\121\1\147\6\121\2\147"
            + "\1\121\2\147\4\121\2\147\14\121\1\147\1\121\1\147" + "\4\121\3\71\5\150\2\71\1\130\2\71\1\150\1\131"
            + "\1\150\6\71\2\150\1\71\2\150\4\71\2\150\14\71" + "\1\150\1\71\1\150\4\71\3\5\5\151\2\0\3\5"
            + "\1\151\1\0\1\151\1\0\1\5\3\0\1\5\2\151" + "\1\5\2\151\2\0\2\5\2\151\2\5\11\0\1\5"
            + "\1\151\1\5\1\151\3\5\1\0\3\5\5\152\2\0" + "\3\5\1\152\1\0\1\152\1\0\1\5\3\0\1\5"
            + "\2\152\1\5\2\152\2\0\2\5\2\152\2\5\11\0" + "\1\5\1\152\1\5\1\152\3\5\1\0\3\121\5\153"
            + "\1\65\1\0\3\121\1\153\1\121\1\153\6\121\2\153" + "\1\121\2\153\4\121\2\153\14\121\1\153\1\121\1\153"
            + "\4\121\3\71\5\154\2\71\1\130\2\71\1\154\1\131" + "\1\154\6\71\2\154\1\71\2\154\4\71\2\154\14\71"
            + "\1\154\1\71\1\154\4\71\3\5\5\155\2\0\3\5" + "\1\155\1\0\1\155\1\0\1\5\3\0\1\5\2\155"
            + "\1\5\2\155\2\0\2\5\2\155\2\5\11\0\1\5" + "\1\155\1\5\1\155\3\5\1\0\3\5\5\6\2\0"
            + "\3\5\1\6\1\0\1\6\1\0\1\5\3\0\1\5" + "\2\6\1\5\2\6\2\0\2\5\2\6\2\5\11\0"
            + "\1\5\1\6\1\5\1\6\3\5\1\0\3\121\5\64" + "\1\65\1\0\3\121\1\64\1\121\1\64\6\121\2\64"
            + "\1\121\2\64\4\121\2\64\14\121\1\64\1\121\1\64" + "\4\121\3\71\5\14\2\71\1\130\2\71\1\14\1\131"
            + "\1\14\6\71\2\14\1\71\2\14\4\71\2\14\14\71" + "\1\14\1\71\1\14\4\71\3\5\5\156\2\0\3\5"
            + "\1\156\1\0\1\156\1\0\1\5\3\0\1\5\2\156" + "\1\5\2\156\2\0\2\5\2\156\2\5\11\0\1\5"
            + "\1\156\1\5\1\156\3\5\1\0\3\5\5\102\2\0" + "\3\5\1\102\1\0\1\102\1\0\1\5\3\0\1\5"
            + "\2\102\1\5\2\102\2\0\2\5\2\102\2\5\11\0" + "\1\5\1\102\1\5\1\102\3\5\1\0";

    private static int[] zzUnpackTrans() {
        final int[] result = new int[4420];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(final String packed, final int offset, final int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
            "Error: pushback value was too large" };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\4\0\5\1\1\11\2\1\1\11\7\1\2\11\3\1"
            + "\1\11\4\1\2\11\2\1\1\11\3\1\1\11\15\1" + "\1\11\1\0\4\1\2\11\3\1\1\0\3\1\2\11"
            + "\2\0\1\11\3\1\1\0\5\1\1\11\6\1\1\11" + "\11\1\1\11\13\1";

    private static int[] zzUnpackAttribute() {
        final int[] result = new int[110];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(final String packed, final int offset, final int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        final int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            final int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from input
     */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */

    /**
     * Constructor. This must be here because JFlex does not generate a no-parameter constructor.
     */
    public AExpressionTokenMaker() {}

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType
     *            The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(final int start, final int end, final int tokenType) {
        final int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, true);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType
     *            The token's type.
     */
    private void addToken(final int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType
     *            The token's type.
     * @see #addHyperlinkToken(int, int, int)
     */
    private void addToken(final int start, final int end, final int tokenType) {
        final int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, false);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array
     *            The character array.
     * @param start
     *            The starting offset in the array.
     * @param end
     *            The ending offset in the array.
     * @param tokenType
     *            The token's type.
     * @param startOffset
     *            The offset in the document at which this token occurs.
     * @param hyperlink
     *            Whether this token is a hyperlink.
     */
    @Override
    public void addToken(final char[] array, final int start, final int end, final int tokenType, final int startOffset,
            final boolean hyperlink) {
        super.addToken(array, start, end, tokenType, startOffset, hyperlink);
        zzStartRead = zzMarkedPos;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(final int languageIndex) {
        return new String[] { "//", null };
    }

    /**
     * Returns the first token in the linked list of tokens generated from <code>text</code>. This method must be
     * implemented by subclasses so they can correctly implement syntax highlighting.
     *
     * @param text
     *            The text from which to get tokens.
     * @param initialTokenType
     *            The token type we should start with.
     * @param startOffset
     *            The offset into the document at which <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing the syntax highlighted text.
     */
    @Override
    public Token getTokenList(final Segment text, final int initialTokenType, final int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
        case Token.COMMENT_MULTILINE:
            state = MLC;
            start = text.offset;
            break;
        case Token.COMMENT_DOCUMENTATION:
            state = DOCCOMMENT;
            start = text.offset;
            break;
        default:
            state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (final IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the old reader.
     *
     * All internal variables are reset, the old input stream <b>cannot</b> be reused (internal buffer is discarded and
     * lost). Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader
     *            the new input stream
     */
    public final void yyreset(final Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill no longer "refills" the buffer (since the
         * way we do it, it's always "full" the first time through, since it points to the segment's array). So, we
         * assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this constructor.
     *
     * @param in
     *            the java.io.Reader to read input from.
     */
    public AExpressionTokenMaker(final java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this constructor.
     *
     * @param in
     *            the java.io.Inputstream to read input from.
     */
    public AExpressionTokenMaker(final java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed
     *            the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(final String packed) {
        final char[] map = new char[0x10000];
        int i = 0; /* index in packed string */
        int j = 0; /* index in unpacked array */
        while (i < 166) {
            int count = packed.charAt(i++);
            final char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; /* indicate end of file */
        zzEndRead = zzStartRead; /* invalidate buffer */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState
     *            the new lexical state
     */
    @Override
    public final void yybegin(final int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     * 
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos
     *            the position of the character to fetch. A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(final int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen". If this method is called, something is seriously
     * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode
     *            the code of the errormessage to display
     */
    private void zzScanError(final int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (final ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number
     *            the number of characters to be read again. This number must not be greater than yylength()!
     */
    public void yypushback(final int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error
     * occurs.
     *
     * @return the next token
     * @exception java.io.IOException
     *                if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        final char[] zzCMapL = ZZ_CMAP;

        final int[] zzTransL = ZZ_TRANS;
        final int[] zzRowMapL = ZZ_ROWMAP;
        final int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        final boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    final int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    final int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 5: {
                addNullToken();
                return firstToken;
            }
            case 31:
                break;
            case 26: {
                addToken(Token.LITERAL_CHAR);
            }
            case 32:
                break;
            case 23: {
                yybegin(YYINITIAL);
                addToken(start, zzStartRead + 1, Token.COMMENT_MULTILINE);
            }
            case 33:
                break;
            case 29: {
                addToken(Token.COMMENT_MULTILINE);
            }
            case 34:
                break;
            case 21: {
                start = zzMarkedPos - 2;
                yybegin(MLC);
            }
            case 35:
                break;
            case 7: {
                addToken(Token.WHITESPACE);
            }
            case 36:
                break;
            case 17: {
                addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
            }
            case 37:
                break;
            case 27: {
                addToken(Token.ERROR_STRING_DOUBLE);
            }
            case 38:
                break;
            case 16: {
                addToken(Token.LITERAL_NUMBER_FLOAT);
            }
            case 39:
                break;
            case 22: {
                addToken(Token.RESERVED_WORD);
            }
            case 40:
                break;
            case 9: {
                addToken(Token.SEPARATOR);
            }
            case 41:
                break;
            case 2: {
                addToken(Token.IDENTIFIER);
            }
            case 42:
                break;
            case 14: {
                addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                addNullToken();
                return firstToken;
            }
            case 43:
                break;
            case 20: {
                start = zzMarkedPos - 2;
                yybegin(EOL_COMMENT);
            }
            case 44:
                break;
            case 4: {
                addToken(Token.ERROR_CHAR);
                addNullToken();
                return firstToken;
            }
            case 45:
                break;
            case 6: {
                addToken(Token.ERROR_STRING_DOUBLE);
                addNullToken();
                return firstToken;
            }
            case 46:
                break;
            case 1: {
                addToken(Token.ERROR_IDENTIFIER);
            }
            case 47:
                break;
            case 18: {
                addToken(Token.ERROR_CHAR);
            }
            case 48:
                break;
            case 30: {
                addToken(Token.LITERAL_BOOLEAN);
            }
            case 49:
                break;
            case 13: {
                addToken(start, zzStartRead - 1, Token.COMMENT_DOCUMENTATION);
                return firstToken;
            }
            case 50:
                break;
            case 10: {
                addToken(Token.ANNOTATION);
            }
            case 51:
                break;
            case 28: {
                start = zzMarkedPos - 3;
                yybegin(DOCCOMMENT);
            }
            case 52:
                break;
            case 19: {
                addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
            case 53:
                break;
            case 25: {
                final int temp = zzStartRead;
                addToken(start, zzStartRead - 1, Token.COMMENT_DOCUMENTATION);
                addToken(temp, zzMarkedPos - 1, Token.COMMENT_MARKUP);
                start = zzMarkedPos;
            }
            case 54:
                break;
            case 24: {
                yybegin(YYINITIAL);
                addToken(start, zzStartRead + 1, Token.COMMENT_DOCUMENTATION);
            }
            case 55:
                break;
            case 15: {
                addToken(Token.ERROR_NUMBER_FORMAT);
            }
            case 56:
                break;
            case 3: {
                addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
            case 57:
                break;
            case 8: {
                addToken(Token.OPERATOR);
            }
            case 58:
                break;
            case 11: {
            }
            case 59:
                break;
            case 12: {
                addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                return firstToken;
            }
            case 60:
                break;
            default:
                if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                    zzAtEOF = true;
                    switch (zzLexicalState) {
                    case EOL_COMMENT: {
                        addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                        addNullToken();
                        return firstToken;
                    }
                    case 111:
                        break;
                    case DOCCOMMENT: {
                        yybegin(YYINITIAL);
                        addToken(start, zzEndRead, Token.COMMENT_DOCUMENTATION);
                        return firstToken;
                    }
                    case 112:
                        break;
                    case YYINITIAL: {
                        addNullToken();
                        return firstToken;
                    }
                    case 113:
                        break;
                    case MLC: {
                        addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                        return firstToken;
                    }
                    case 114:
                        break;
                    default:
                        return null;
                    }
                } else {
                    zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

}
